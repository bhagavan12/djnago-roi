"""
Django settings for roi_calculator project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


import os
from pathlib import Path
from decouple import config
# Load environment variables from .env file (optional)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv not available, continue without it
    pass

# Load API keys from config file
try:
    from config import (
        GEMINI_API_KEY as CONFIG_GEMINI_KEY,
        RAZORPAY_KEY_ID as CONFIG_RAZORPAY_KEY_ID,
        RAZORPAY_KEY_SECRET as CONFIG_RAZORPAY_KEY_SECRET,
        RAZORPAY_PAYMENT_BUTTON_ID as CONFIG_RAZORPAY_PAYMENT_BUTTON_ID
    )
    
    if CONFIG_GEMINI_KEY and CONFIG_GEMINI_KEY != "your-gemini-api-key-here":
        os.environ['GEMINI_API_KEY'] = CONFIG_GEMINI_KEY
    
    if CONFIG_RAZORPAY_KEY_ID and CONFIG_RAZORPAY_KEY_ID != "rzp_test_your_key_id_here":
        os.environ['RAZORPAY_KEY_ID'] = CONFIG_RAZORPAY_KEY_ID
    
    if CONFIG_RAZORPAY_KEY_SECRET and CONFIG_RAZORPAY_KEY_SECRET != "your_razorpay_secret_here":
        os.environ['RAZORPAY_KEY_SECRET'] = CONFIG_RAZORPAY_KEY_SECRET
    
    if CONFIG_RAZORPAY_PAYMENT_BUTTON_ID:
        os.environ['RAZORPAY_PAYMENT_BUTTON_ID'] = CONFIG_RAZORPAY_PAYMENT_BUTTON_ID
        
except ImportError:
    # config.py not available, continue without it
    pass


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']
ALLOWED_HOSTS = ['*']
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'calculator',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'roi_calculator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'roi_calculator.wsgi.application'

# Database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# Database - Using MongoDB Atlas or local MongoDB
MONGODB_ATLAS_URI = config('MONGODB_ATLAS_URI', default=None)

if MONGODB_ATLAS_URI:
    # Use MongoDB Atlas
    DATABASES = {
        'default': {
            'ENGINE': 'djongo',
            'NAME': config('DB_NAME', default='roical_db'),
            'ENFORCE_SCHEMA': True,
            'CLIENT': {
                'host': MONGODB_ATLAS_URI,
            }
        }
    }
else:
    # Use local MongoDB
    DATABASES = {
        'default': {
            'ENGINE': 'djongo',
            'NAME': config('DB_NAME', default='roical_db'),
            'ENFORCE_SCHEMA': True,
            'CLIENT': {
                'host': config('DB_HOST', default='localhost'),
                'port': config('DB_PORT', default=27017, cast=int),
                'username': config('DB_USERNAME', default=''),
                'password': config('DB_PASSWORD', default=''),
            }
        }
    }
# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Session settings
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Google Gemini API Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'your-gemini-api-key-here')

# Razorpay Configuration
RAZORPAY_KEY_ID = os.getenv('RAZORPAY_KEY_ID', 'rzp_test_your_key_id_here')
RAZORPAY_KEY_SECRET = os.getenv('RAZORPAY_KEY_SECRET', 'your_razorpay_secret_here')
RAZORPAY_PAYMENT_BUTTON_ID = os.getenv('RAZORPAY_PAYMENT_BUTTON_ID', 'pl_RDhRAQjOTNv1Jm')
